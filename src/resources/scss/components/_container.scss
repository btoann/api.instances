@import '../helpers/helpers';

$media-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  hd: 1400px,
);

$container-max-widths: (
  xs: 0,
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  hd: 1320px,
);

@mixin make-breakpoint($name, $max-width, $breakpoints: $media-breakpoints) {
  $min-width: map-get($breakpoints, $name);
  @if $min-width {
    @media screen and (min-width: $min-width) {
      @if $max-width != 0 {
        max-width: $max-width;
      }
      @content;
    }
  }
}
@mixin make-breakpoint-up($name, $breakpoints: $media-breakpoints) {
  $min-width: map-get-next($breakpoints, $name, true);
  @if $min-width {
    $max-width: $min-width - 1px;
    @media screen and (max-width: $max-width) {
      @content;
    }
  }
}

@mixin make-12col($size) {
  // Columns 1 -> 12
  @for $i from 1 through 12 {
    &.#{$size}-#{$i} {
      display: unset;
      flex: 0 0 calc((100% / 12) * #{$i});
      max-width: calc((100% / 12) * #{$i});
    }
  }
  // Offset of Columns 1 -> 12
  @for $i from 1 through 11 {
    &.o#{$size}-#{$i} {
      margin-left: calc((100% / 12) * #{$i});
    }
  }
}
@mixin make-hidden-col($size) {
  &.#{$size}-0 {
    display: none;
  }
}

.Container {
  --container-max-width: 100%;
  --container-wide-width: 100%;
  --container-spacing: 0.75rem;
  --container-gutter: 0.75rem;
  --row-margin: calc(0rem - var(--container-spacing));
  --col-padding: var(--container-spacing);
}

.Container {
  // gap: var(--col-padding);
  width: 100%;
  max-width: var(--container-max-width);
  padding-left: var(--container-gutter);
  padding-right: var(--container-gutter);
  margin-left: auto;
  margin-right: auto;
  transition: all 0.15s linear;
}

.Container {
  .Row {
    display: flex;
    flex-wrap: wrap;
    margin-left: var(--row-margin);
    margin-right: var(--row-margin);

    & > * {
      flex-shrink: 0;
      width: 100%;
      max-width: 100%;
      padding-left: var(--col-padding);
      padding-right: var(--col-padding);
      padding-bottom: var(--col-padding);
    }

    & .Heading {
      margin: 0;
      // padding-left: var(--col-padding);
      // padding-right: var(--col-padding);
      padding-bottom: var(--col-padding);
    }

    & .Col {
      padding-left: var(--col-padding);
      padding-right: var(--col-padding);
      padding-bottom: var(--col-padding);
    }

    &-gutters-0 {
      margin-left: 0;
      margin-right: 0;
      & .Col {
        padding-left: 0;
        padding-right: 0;
      }
    }
  }

  $self: #{&};
  &-wide {
    @extend #{$self};
    min-width: var(--container-wide-width);
  }

  $container-max-widths-list: $container-max-widths;
  @each $breakpoint, $max-width in $container-max-widths-list {
    @include make-breakpoint($breakpoint, $max-width) {
      @if ($breakpoint == 'xs') or
        ($breakpoint == 'sm') or
        ($breakpoint == 'md')
      {
        --container-spacing: 0.5rem;
      } @else {
        --container-spacing: 0.75rem;
      }
      @if ($breakpoint == 'sm') or
        ($breakpoint == 'md') or
        ($breakpoint == 'lg') or
        ($breakpoint == 'xl')
      {
        .Row .Col {
          @include make-12col($breakpoint);
        }
      }
    }
    @include make-breakpoint-up($breakpoint) {
      .Row .Col {
        @include make-hidden-col($breakpoint);
      }
    }
  }
}

@mixin make-reponsive($breakpoint, $breakpoints: $media-breakpoints) {
  // keys(name) list
  $keys: map-keys($breakpoints);
  // current index
  $index: index($keys, $breakpoint);
  @if $index {
    // if key is followed by larger value
    @if $index < length($keys) {
      $min-width: map-get($breakpoints, $breakpoint);
      $next-breakpoint: map-get-next($breakpoints, $breakpoint);
      $max-width: map-get($breakpoints, $next-breakpoint);
      @media screen and (min-width: $min-width) and (max-width: calc($max-width - 1px)) {
        @content;
      }
    }
    // if key is the largest value
    @if $index == length($keys) {
      @media screen and (min-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
  } @else {
    @error "Invalid breakpoint #{$breakpoint}!";
  }
}

@mixin make-multi-reponsive($breakpoints...) {
  @each $breakpoint in $breakpoints {
    @include make-reponsive($breakpoint) {
      @content;
    }
  }
}

@mixin make-range-reponsive($min-breakpoint, $max-breakpoint) {
  $min-width: map-get($media-breakpoints, $min-breakpoint);
  $max-width: map-get($media-breakpoints, $max-breakpoint);
  @if $min-width and $max-width and $min-width < $max-width {
    @media screen and (min-width: $min-width) and (max-width: calc($max-width - 1px)) {
      @content;
    }
  } @else {
    @error "Invalid breakpoints!";
  }
}
